{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "955f881561df7b27",
   "metadata": {},
   "source": [
    "# 5 DFL methods for non-specific optimization models\n",
    "In this notebook we will shortly highlight the methods that are applicable for non-specific optimization models, i.e., methods that can be applied to a blackbox optimization model. These methods do not have requirements on the optimization model like a linear objective or being differentiable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "initial_id",
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "\n",
    "path_to_project = os.path.dirname(os.path.abspath(\"\")) + \"/\"\n",
    "sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(\"PyDFLT\"))))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49ac0dbb2e7bc4e",
   "metadata": {},
   "source": [
    "## 5.1 The Weighted Set Multi-Cover Problem\n",
    "We will use the WSMC with recourse in this notebook. It is characterized as follows:\n",
    "\n",
    "- There is a set of elements that need to be covered by a collection of sets.\n",
    "- Each set covers a subset of the elements.\n",
    "- Each element has a coverage requirement, specifying how many times it must be covered.\n",
    "- Each set has a cost, and the objective is to select sets to minimize the total cost while ensuring all coverage requirements are met.\n",
    "\n",
    "We look specifically at the two-stage variant of the problem, where:\n",
    "- In the first-stage, the sets are selected, while the coverage requirements are unknown.\n",
    "- The true coverage requirements are revealed in the second-stage.\n",
    "- A recourse action allows corrections for the items that were not fully covered and assigns a penalty based on the missed items.\n",
    "- A special variant of the problem has also a recourse in the other direction, allowing unused sets to be sold.\n",
    "\n",
    "We define the model, data and problem:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53d3b3961a4a6d99",
   "metadata": {},
   "outputs": [],
   "source": [
    "from src.concrete_models import WeightedSetMultiCover\n",
    "from src.generate_data_functions import gen_data_wsmc\n",
    "from src.problem import Problem\n",
    "\n",
    "model = WeightedSetMultiCover(\n",
    "    num_items=2,\n",
    "    num_covers=3,\n",
    "    penalty=5,\n",
    "    cover_costs_lb=5,\n",
    "    cover_costs_ub=50,\n",
    "    seed=5,\n",
    "    recovery_ratio=0,\n",
    ")\n",
    "data = gen_data_wsmc(\n",
    "    seed=5,\n",
    "    num_data=500,\n",
    "    num_features=5,\n",
    "    num_items=model.num_items,\n",
    "    degree=5,\n",
    "    noise_width=0.5,\n",
    ")\n",
    "problem = Problem(data_dict=data, opt_model=model, train_ratio=0.5, val_ratio=0.2, seed=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bd3fb8683b9001a",
   "metadata": {},
   "source": [
    "## 5.2 Score Function Gradient Estimation\n",
    "\"Here we write about SFGE\""
   ]
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "## 5.3 Landscape Surrogate\n",
    "\"Here we write about Lancer\""
   ],
   "id": "f6f0bc731ea39ecc"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
