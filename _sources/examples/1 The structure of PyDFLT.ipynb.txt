{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "856263c689b7feba",
   "metadata": {},
   "source": [
    "# 1 The structure of PyDFLT\n",
    "In this notebook we show you the basic structure used within PyDFLT. To apply DFL, we use the following components:\n",
    "\n",
    "1. An `OptimizationModel` which specifies the original optimization model/decision-making problem we try to tackle, including some uncertain parameters\n",
    "2. A `Dataset` which includes the training data, i.e., the context/feature values that correlate with the uncertain parameters\n",
    "3. The DFL `Problem` we are trying to solve, defined by the `Dataset` and `OptimizationModel`\n",
    "4. A `DecisionMaker`, which includes the DFL approach that is used to learn the mapping from features to decisions. It includes a `Predictor` to (most often) map from features to uncertain parameters, and a decision model to map from uncertain parameters to decisions.\n",
    "5. A `Runner` which runs the training loop to train the `DecisionMaker` in making high-quality decisions.\n",
    "\n",
    "We will show the usage of these components in this notebook, applied to a continuous knapsack problem.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f50b7de3-ce20-4965-9a65-ed4bf25746b6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-10-01T11:40:57.485950Z",
     "start_time": "2025-10-01T11:40:57.481193Z"
    }
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "\n",
    "path_to_project = os.path.dirname(os.path.abspath(\"\")) + \"/\"\n",
    "sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(\"PyDFLT\"))))\n",
    "# Jupyter is not installed in your venv automatically, if you used uv the following will install jupyter: uv sync --group examples"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a43d9ecb8e585d0e",
   "metadata": {},
   "source": [
    "## 1.1 The `OptimizationModel`\n",
    "The optimization model is the formulation of the model that the decision maker wants to solve in practice. Given some realization of the uncertain parameters, solving the model will lead to a decision. Currently we support models defined as a differentiable model using CVXPY or models defined using gurobipy (including two-stage stochastic models). In `src/concrete_models` there are pre-implemented models defined. For each type of model some methods are required that define the model (for example `get_objective` and `_create_model`). As an example we will take a differentiable knapsack model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f6c5aca339717baf",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-10-01T12:28:41.437107Z",
     "start_time": "2025-10-01T12:28:38.586988Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Auto-Sklearn cannot be imported.\n"
     ]
    }
   ],
   "source": [
    "from src.concrete_models import CVXPYDiffKnapsackModel\n",
    "\n",
    "num_items = 10\n",
    "optimization_model = CVXPYDiffKnapsackModel(num_decisions=num_items, capacity=20, weights_lb=3, weights_ub=8, dimension=1, seed=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10d958a2f213b78c",
   "metadata": {},
   "source": [
    "## 1.2 The `Dataset`\n",
    "For a DFL problem there is data required with feature and uncertain parameter pairs. The `Dataset` itself is created by the problem class, so the only requirement for the data is that it is in a `dict` that has a `'features'` key and a key for each uncertain parameters as defined in the `OptimizationModel`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2ed48f4315c15ce6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-10-01T11:42:14.790326Z",
     "start_time": "2025-10-01T11:42:14.767414Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Uncertain parameter names: ['item_value'].\n",
      "Shape of weights: (1, 10), values: (1000, 10), features: (1000, 5).\n",
      "Data dictionary keys: dict_keys(['item_value', 'features']).\n"
     ]
    }
   ],
   "source": [
    "from src.generate_data_functions.generate_data_knapsack import gen_data_knapsack\n",
    "\n",
    "print(f\"Uncertain parameter names: {optimization_model.param_to_predict_names}.\")\n",
    "data = gen_data_knapsack(seed=5, num_data=1000, num_items=num_items, num_features=5)\n",
    "print(f\"Data dictionary keys: {data.keys()}.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e37504cf615e3770",
   "metadata": {},
   "source": [
    "## 1.3 The `Problem`\n",
    "A DFL problem is defined by an optimization model and data, so we can now define the problem. It also includes the train/validation/test ratios. Optimal decisions and objectives for the in data observed parameter realization are most efficiently computed upfront, which is one of the `Problem`'s settings. There are some other settings including not randomizing the split but keeping the data in (timely) order `time_respecting_split`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "46bd4c9a16febf52",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-10-01T11:51:34.363172Z",
     "start_time": "2025-10-01T11:51:33.983359Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Computing optimal decisions for the entire dataset...\n",
      "Optimal decisions computed and added to dataset.\n",
      "Computing optimal objectives for the entire dataset...\n",
      "Optimal objectives computed and added to dataset.\n",
      "Dataset split completed: Train=700, Validation=150, Test=150\n"
     ]
    }
   ],
   "source": [
    "from src.problem import Problem\n",
    "\n",
    "problem = Problem(\n",
    "    data_dict=data,\n",
    "    opt_model=optimization_model,\n",
    "    train_ratio=0.7,\n",
    "    val_ratio=0.15,\n",
    "    compute_optimal_decisions=True,\n",
    "    compute_optimal_objectives=True,\n",
    "    time_respecting_split=True,\n",
    "    seed=5,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "945ff25b6cb7a7c8",
   "metadata": {},
   "source": [
    "## 1.4 The `DecisionMaker`\n",
    "This is the object that maps from features to decisions, which is generally done using a `Predictor` that maps from features to uncertain parameters and a `decision_model` based on the defined `OptimizationModel` that maps from uncertain parameters to decisions. The `DecisionMaker` includes the method that is used to train itself and therefore always includes a `run_epoch` and an `update` method. The `DifferentiableDecisionMaker` uses differentiation. Training its `Predictor` to minimize mean squared error (Prediction-Focused Learning) for example can be done using this decision maker, but also using any differentiable surrogate losses implemented in *PyEPO* [1], or differentiating through the optimization model using *CVXPYLayers* [2] is possible. The other decision makers do not use direct differentiation, but for example use stochastic gradient estimation to differentiate. Our example problem is differentiable, so we use `'regret'` as loss function. As a predictor we use a linear predictor (Multi Layer Perceptron without hidden layers)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c25285d82ef48643",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-10-01T12:06:25.137305Z",
     "start_time": "2025-10-01T12:06:24.492558Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Problem mode set to: train\n",
      "Problem mode set to: train\n"
     ]
    }
   ],
   "source": [
    "from src.decision_makers import DifferentiableDecisionMaker\n",
    "\n",
    "decision_maker = DifferentiableDecisionMaker(\n",
    "    problem=problem, learning_rate=1e-3, batch_size=64, loss_function_str=\"regret\", predictor_str=\"MLP\", predictor_kwargs={\"num_hidden_layers\": 0}, seed=5\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d735aff659ba8e75",
   "metadata": {},
   "source": [
    "## 1.5 The `Runner`\n",
    "This object is used to train the `DecisionMaker`. It includes the number of epochs to run and also defines what are important metrics. When `save_best=True`, it stores the best performing model on the validation set, otherwise it just takes the model obtained after the last epoch."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "8596ffbf99b891c3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-10-01T12:27:16.903075Z",
     "start_time": "2025-10-01T12:27:04.225266Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0/10: Starting initial validation...\n",
      "Problem mode set to: validation\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "validation/item_value_mean: 3.7579\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "Initial best validation metric (objective): 20.018089294433594\n",
      "Starting training...\n",
      "Epoch: 1/10\n",
      "Problem mode set to: train\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2586\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9387\n",
      "train/solver_calls_mean: 18133.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9387\n",
      "Problem mode set to: validation\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2586\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9387\n",
      "train/solver_calls_mean: 18133.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9387\n",
      "Validation evaluation (objective): 20.018089294433594\n",
      "Epoch: 2/10\n",
      "Problem mode set to: train\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2635\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9465\n",
      "train/solver_calls_mean: 18558.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9465\n",
      "Problem mode set to: validation\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2635\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9465\n",
      "train/solver_calls_mean: 18558.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9465\n",
      "Validation evaluation (objective): 20.018089294433594\n",
      "Epoch: 3/10\n",
      "Problem mode set to: train\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2634\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9505\n",
      "train/solver_calls_mean: 18983.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3502\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9505\n",
      "Problem mode set to: validation\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2634\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9505\n",
      "train/solver_calls_mean: 18983.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3502\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9505\n",
      "Validation evaluation (objective): 20.018089294433594\n",
      "Epoch: 4/10\n",
      "Problem mode set to: train\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2641\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9494\n",
      "train/solver_calls_mean: 19408.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9494\n",
      "Problem mode set to: validation\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2641\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9494\n",
      "train/solver_calls_mean: 19408.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9494\n",
      "Validation evaluation (objective): 20.018089294433594\n",
      "Epoch: 5/10\n",
      "Problem mode set to: train\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2666\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9510\n",
      "train/solver_calls_mean: 19833.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9510\n",
      "Problem mode set to: validation\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2666\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9510\n",
      "train/solver_calls_mean: 19833.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9510\n",
      "Validation evaluation (objective): 20.018089294433594\n",
      "Epoch: 6/10\n",
      "Problem mode set to: train\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2672\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9510\n",
      "train/solver_calls_mean: 20258.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9510\n",
      "Problem mode set to: validation\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2672\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9510\n",
      "train/solver_calls_mean: 20258.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9510\n",
      "Validation evaluation (objective): 20.018089294433594\n",
      "Epoch: 7/10\n",
      "Problem mode set to: train\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2660\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9491\n",
      "train/solver_calls_mean: 20683.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9491\n",
      "Problem mode set to: validation\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2660\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9491\n",
      "train/solver_calls_mean: 20683.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9491\n",
      "Validation evaluation (objective): 20.018089294433594\n",
      "Epoch: 8/10\n",
      "Problem mode set to: train\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2674\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9504\n",
      "train/solver_calls_mean: 21108.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9504\n",
      "Problem mode set to: validation\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2674\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9504\n",
      "train/solver_calls_mean: 21108.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9504\n",
      "Validation evaluation (objective): 20.018089294433594\n",
      "Epoch: 9/10\n",
      "Problem mode set to: train\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2681\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9510\n",
      "train/solver_calls_mean: 21533.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9510\n",
      "Problem mode set to: validation\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2681\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9510\n",
      "train/solver_calls_mean: 21533.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9510\n",
      "Validation evaluation (objective): 20.018089294433594\n",
      "Epoch: 10/10\n",
      "Problem mode set to: train\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2684\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9504\n",
      "train/solver_calls_mean: 21958.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9504\n",
      "Problem mode set to: validation\n",
      "Epoch Results:\n",
      "validation/mse_mean: 63.4215\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "train/objective_mean: 18.2684\n",
      "validation/rel_regret_mean: 0.3511\n",
      "validation/objective_mean: 20.0181\n",
      "validation/select_item_mean: 0.3833\n",
      "validation/abs_regret_mean: 11.8887\n",
      "train/abs_regret_mean: 10.9504\n",
      "train/solver_calls_mean: 21958.6364\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/grad_norm_mean: 0.0000\n",
      "train/loss_mean: 10.9504\n",
      "Validation evaluation (objective): 20.018089294433594\n",
      "Training finished. Evaluating on the test set...\n",
      "Problem mode set to: test\n",
      "Epoch Results:\n",
      "validation/rel_regret_mean: 0.3511\n",
      "test/abs_regret_mean: 10.0432\n",
      "train/abs_regret_mean: 10.9504\n",
      "train/solver_calls_mean: 21958.6364\n",
      "validation/abs_regret_mean: 11.8887\n",
      "test/mse_mean: 40.6174\n",
      "validation/sym_rel_regret_mean: 0.2254\n",
      "train/loss_mean: 10.9504\n",
      "train/sym_rel_regret_mean: 0.2255\n",
      "test/sym_rel_regret_mean: 0.2131\n",
      "test/objective_mean: 17.5269\n",
      "validation/objective_mean: 20.0181\n",
      "test/item_value_mean: 3.7932\n",
      "test/rel_regret_mean: 0.3369\n",
      "test/select_item_mean: 0.3845\n",
      "validation/item_value_mean: 3.7579\n",
      "train/rel_regret_mean: 0.3503\n",
      "train/grad_norm_mean: 0.0000\n",
      "validation/mse_mean: 63.4215\n",
      "train/objective_mean: 18.2684\n",
      "validation/select_item_mean: 0.3833\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "np.float32(20.01809)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from src.runner import Runner\n",
    "\n",
    "runner = Runner(decision_maker=decision_maker, num_epochs=10, main_metric=\"objective\", use_wandb=False, save_best=True, seed=5)\n",
    "runner.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "276dec035d3ca20c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-10-01T12:27:19.028847Z",
     "start_time": "2025-10-01T12:27:18.792041Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x300 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "fig, axs = plt.subplots(1, 2, figsize=(10, 3))\n",
    "metric = \"train/objective_mean\"\n",
    "_ = axs[0].plot([d[metric] for d in runner.logger.epoch_metrics_list if metric in d.keys()])\n",
    "_ = axs[0].set_title(metric)\n",
    "\n",
    "metric = \"validation/objective_mean\"\n",
    "_ = axs[1].plot([d[metric] for d in runner.logger.epoch_metrics_list if metric in d.keys()])\n",
    "_ = axs[1].set_title(metric)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.21"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
